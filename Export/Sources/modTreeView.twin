Module modTreeView

Public Const IDD_TREEVIEW = 100

Public Enum TVHandles
  TVI_ROOT = &HFFFF0000
  TVI_FIRST = &HFFFF0001
  TVI_LAST = &HFFFF0002
  TVI_SORT = &HFFFF0003
End Enum

Public Const WC_TREEVIEW As String = "SysTreeView32"
' messages
Public Const I_CHILDRENCALLBACK = (-1)
Public Const I_CHILDRENAUTO = (-2)

Public Enum TVMessages
  TV_FIRST = &H1100
  
'#If UNICODE Then
  TVM_INSERTITEMW = (TV_FIRST + 50)
'#Else
  TVM_INSERTITEM = (TV_FIRST + 0)
'#End If
  
  TVM_DELETEITEM = (TV_FIRST + 1)
  TVM_EXPAND = (TV_FIRST + 2)
  TVM_GETITEMRECT = (TV_FIRST + 4)
  TVM_GETCOUNT = (TV_FIRST + 5)
  TVM_GETINDENT = (TV_FIRST + 6)
  TVM_SETINDENT = (TV_FIRST + 7)
  TVM_GETIMAGELIST = (TV_FIRST + 8)
  TVM_SETIMAGELIST = (TV_FIRST + 9)
  TVM_GETNEXTITEM = (TV_FIRST + 10)
  TVM_SELECTITEM = (TV_FIRST + 11)
  
'#If UNICODE Then
  TVM_GETITEMW = (TV_FIRST + 62)
  TVM_SETITEMW = (TV_FIRST + 63)
  TVM_EDITLABELW = (TV_FIRST + 65)
'#Else
  TVM_GETITEM = (TV_FIRST + 12)
  TVM_SETITEM = (TV_FIRST + 13)
  TVM_EDITLABEL = (TV_FIRST + 14)
'#End If
  
  TVM_GETEDITCONTROL = (TV_FIRST + 15)
  TVM_GETVISIBLECOUNT = (TV_FIRST + 16)
  TVM_HITTEST = (TV_FIRST + 17)
  TVM_CREATEDRAGIMAGE = (TV_FIRST + 18)
  TVM_SORTCHILDREN = (TV_FIRST + 19)
  TVM_ENSUREVISIBLE = (TV_FIRST + 20)
  TVM_SORTCHILDRENCB = (TV_FIRST + 21)
  TVM_ENDEDITLABELNOW = (TV_FIRST + 22)
  
'#If UNICODE Then
  TVM_GETISEARCHSTRINGW = (TV_FIRST + 64)
'#Else
  TVM_GETISEARCHSTRING = (TV_FIRST + 23)
'#End If
  
  TVM_SETTOOLTIPS = (TV_FIRST + 24)
  TVM_GETTOOLTIPS = (TV_FIRST + 25)
  TVM_SETINSERTMARK = (TV_FIRST + 26)
  TVM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
  TVM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
  TVM_SETITEMHEIGHT = (TV_FIRST + 27)
  TVM_GETITEMHEIGHT = (TV_FIRST + 28)
  TVM_SETBKCOLOR = (TV_FIRST + 29)
  TVM_SETTEXTCOLOR = (TV_FIRST + 30)
  TVM_GETBKCOLOR = (TV_FIRST + 31)
  TVM_GETTEXTCOLOR = (TV_FIRST + 32)
  TVM_SETSCROLLTIME = (TV_FIRST + 33)
  TVM_GETSCROLLTIME = (TV_FIRST + 34)
  TVM_SETBORDER = (TV_FIRST + 35)

  TVM_SETINSERTMARKCOLOR = (TV_FIRST + 37)
  TVM_GETINSERTMARKCOLOR = (TV_FIRST + 38)
  '5.0
  TVM_GETITEMSTATE = (TV_FIRST + 39)
  TVM_SETLINECOLOR = (TV_FIRST + 40)
  TVM_GETLINECOLOR = (TV_FIRST + 41)
  TVM_MAPACCIDTOHTREEITEM = (TV_FIRST + 42)
  TVM_MAPHTREEITEMTOACCID = (TV_FIRST + 43)
  TVM_SETEXTENDEDSTYLE = (TV_FIRST + 44)
  TVM_GETEXTENDEDSTYLE = (TV_FIRST + 45)
  TVM_SETHOT = (TV_FIRST + 58)
  TVM_SETAUTOSCROLLINFO = (TV_FIRST + 59)
  '6.0
  TVM_GETSELECTEDCOUNT = (TV_FIRST + 70)
  TVM_SHOWINFOTIP = (TV_FIRST + 71)
  TVM_GETITEMPARTRECT = (TV_FIRST + 72)
    
End Enum   ' TVMessages

Public Enum TV_Styles
    TVS_HASBUTTONS = &H1
    TVS_HASLINES = &H2
    TVS_LINESATROOT = &H4
    TVS_EDITLABELS = &H8
    TVS_DISABLEDRAGDROP = &H10
    TVS_SHOWSELALWAYS = &H20
    TVS_RTLREADING = &H40
    TVS_NOTOOLTIPS = &H80
    TVS_CHECKBOXES = &H100
    TVS_TRACKSELECT = &H200
    TVS_SINGLEEXPAND = &H400
    TVS_INFOTIP = &H800
    TVS_FULLROWSELECT = &H1000
    TVS_NOSCROLL = &H2000
    TVS_NONEVENHEIGHT = &H4000
    TVS_NOHSCROLL = &H8000
End Enum
Public Enum TV_Ex_Styles
    TVS_EX_NOSINGLECOLLAPSE = &H1
    TVS_EX_MULTISELECT = &H2
    TVS_EX_DOUBLEBUFFER = &H4
    TVS_EX_NOINDENTSTATE = &H8
    TVS_EX_RICHTOOLTIP = &H10
    TVS_EX_AUTOHSCROLL = &H20
    TVS_EX_FADEINOUTEXPANDOS = &H40
    TVS_EX_PARTIALCHECKBOXES = &H80
    TVS_EX_EXCLUSIONCHECKBOXES = &H100
    TVS_EX_DIMMEDCHECKBOXES = &H200
    TVS_EX_DRAWIMAGEASYNC = &H400
End Enum

Public Enum TVSB_Flags
    TVSBF_XBORDER = &H1
    TVSBF_YBORDER = &H2
End Enum
' TVM_GET/SETIMAGELIST wParam
Public Enum TVImageLists
    TVSIL_NORMAL = 0
    TVSIL_STATE = 2
End Enum

' TVM_GETNEXTITEM wParam
Public Enum TVM_GETNEXTITEM_wParam
  TVGN_ROOT = &H0
  TVGN_NEXT = &H1
  TVGN_PREVIOUS = &H2
  TVGN_PARENT = &H3
  TVGN_CHILD = &H4
  TVGN_FIRSTVISIBLE = &H5
  TVGN_NEXTVISIBLE = &H6
  TVGN_PREVIOUSVISIBLE = &H7
  TVGN_DROPHILITE = &H8
  TVGN_CARET = &H9
  TVGN_LASTVISIBLE = &HA
  TVGN_NEXTSELECTED = &HB
End Enum

Public Const TVSI_NOSINGLEEXPAND = &H8000

' TVM_GET/SETITEM lParam
Public Type TVITEM   'TVITEMW
  Mask As TVITEM_Mask
  hItem As LongPtr
  State As TVITEM_State
  StateMask As TVITEM_State
  pszText As LongPtr
  cchTextMax As Long
  iImage As Long
  iSelectedImage As Long
  cChildren As Long
  lParam As LongPtr
End Type
Public Type TVITEMA   ' was TV_ITEM
  Mask As TVITEM_Mask
  hItem As LongPtr
  State As TVITEM_State
  StateMask As TVITEM_State
  pszText As String    ' if a string, must be pre-allocated!!
  cchTextMax As Long
  iImage As Long
  iSelectedImage As Long
  cChildren As Long
  lParam As LongPtr
End Type

Public Type TVITEMEX 'TVITEMEXW
    Mask As TVITEM_Mask
    hItem As LongPtr
    State As TVITEM_State
    StateMask As TVITEM_State
    pszText As LongPtr
    cchTextMax As Long
    iImage As Long
    iSelectedImage As Long
    cChildren As Long
    lParam As LongPtr
    iIntegral As Long
    uStateEx As TVITEM_State_Ex
    hWnd As LongPtr
    iExpandedImage As Long
    iReserved As Long 'Win7
End Type
Public Type TVITEMEXA
    Mask As TVITEM_Mask
    hItem As LongPtr
    State As TVITEM_State
    StateMask As TVITEM_State
    pszText As String
    cchTextMax As Long
    iImage As Long
    iSelectedImage As Long
    cChildren As Long
    lParam As LongPtr
    iIntegral As Long
    uStateEx As TVITEM_State_Ex
    hWnd As LongPtr
    iExpandedImage As Long
    iReserved As Long 'Win7
End Type

'TVINSERTSTRUCT is supposed to be a union where item is TVITEMA/W or EXA/EXW
'but VB doesn't support unions or 'As Any' in structs. Macros using these
'also had to be duplicated
Public Type TVINSERTSTRUCT
    hParent As LongPtr
    hInsertAfter As LongPtr
    Item As TVITEM
End Type
Public Type TVINSERTSTRUCTEX
    hParent As LongPtr
    hInsertAfter As LongPtr
    Item As TVITEMEX
End Type

Public Enum TVITEMPART
    TVGIPR_BUTTON = &H1
End Enum

Public Type TVGETITEMPARTRECTINFO
    hti As LongPtr
    prc As RECT
    partid As TVITEMPART
End Type

' TVITEM mask
Public Enum TVITEM_Mask
    TVIF_TEXT = &H1
    TVIF_IMAGE = &H2
    TVIF_PARAM = &H4
    TVIF_STATE = &H8
    TVIF_HANDLE = &H10
    TVIF_SELECTEDIMAGE = &H20
    TVIF_CHILDREN = &H40
    TVIF_INTEGRAL = &H80
    '6.0
    TVIF_STATEEX = &H100
    TVIF_EXPANDEDIMAGE = &H200
    TVIF_DI_SETITEM = &H1000
End Enum
' TVITEM state, stateMask
Public Enum TVITEM_State
    TVIS_SELECTED = &H2
    TVIS_CUT = &H4
    TVIS_DROPHILITED = &H8
    TVIS_BOLD = &H10
    TVIS_EXPANDED = &H20
    TVIS_EXPANDEDONCE = &H40
    TVIS_EXPANDPARTIAL = &H80
    TVIS_OVERLAYMASK = &HF00
    TVIS_STATEIMAGEMASK = &HF000
    TVIS_USERMASK = &HF000
End Enum
Public Enum TVITEM_State_Ex
    '6.0
    TVIS_EX_FLAT = &H1
    TVIS_EX_DISABLED = &H2
    TVIS_EX_ALL = &H2
End Enum
' TVM_HITTEST lParam
Public Type TVHITTESTINFO   ' was TV_HITTESTINFO
  PT As POINT
  Flags As TVHT_flags
  hItem As LongPtr
End Type

Public Enum TVHT_flags
  TVHT_NOWHERE = &H1   ' In the client area, but below the last item
  TVHT_ONITEMICON = &H2
  TVHT_ONITEMLABEL = &H4
  TVHT_ONITEMINDENT = &H8
  TVHT_ONITEMBUTTON = &H10
  TVHT_ONITEMRIGHT = &H20
  TVHT_ONITEMSTATEICON = &H40
  TVHT_ONITEM = (TVHT_ONITEMICON Or TVHT_ONITEMLABEL Or TVHT_ONITEMSTATEICON)
  
  TVHT_ABOVE = &H100
  TVHT_BELOW = &H200
  TVHT_TORIGHT = &H400
  TVHT_TOLEFT = &H800
  
  ' user-defined
  TVHT_ONITEMLINE = (TVHT_ONITEM Or TVHT_ONITEMINDENT Or TVHT_ONITEMBUTTON Or TVHT_ONITEMRIGHT)
End Enum

' TVM_SORTCHILDRENCB lParam
Public Type TVSORTCB   ' was TV_SORTCB
  hParent As LongPtr
  lpfnCompare As LongPtr
  lParam As LongPtr
End Type
Public Enum TVM_EXPAND_wParam
  TVE_COLLAPSE = &H1
  TVE_EXPAND = &H2
  TVE_TOGGLE = &H3

  TVE_EXPANDPARTIAL = &H4000
  
  TVE_COLLAPSERESET = &H8000
End Enum
Public Const TVC_UNKNOWN = &H0
Public Const TVC_BYMOUSE = &H1
Public Const TVC_BYKEYBOARD = &H2

' notifications
Public Enum TVNotifications
    TVN_FIRST = -400&   ' &HFFFFFE70   ' (0U-400U)
    TVN_LAST = -499&    ' &HFFFFFE0D    ' (0U-499U)
                                                        ' lParam points to:
    TVN_SELCHANGINGA = (TVN_FIRST - 1)          ' NMTREEVIEW
    TVN_SELCHANGEDA = (TVN_FIRST - 2)           ' NMTREEVIEW
    TVN_GETDISPINFOA = (TVN_FIRST - 3)            ' NMTVDISPINFO
    TVN_SETDISPINFOA = (TVN_FIRST - 4)            ' NMTVDISPINFO
    TVN_ITEMEXPANDINGA = (TVN_FIRST - 5)       ' NMTREEVIEW
    TVN_ITEMEXPANDEDA = (TVN_FIRST - 6)        ' NMTREEVIEW
    TVN_BEGINDRAGA = (TVN_FIRST - 7)              ' NMTREEVIEW
    TVN_BEGINRDRAGA = (TVN_FIRST - 8)            ' NMTREEVIEW
    TVN_DELETEITEMA = (TVN_FIRST - 9)             ' NMTREEVIEW
    TVN_BEGINLABELEDITA = (TVN_FIRST - 10)    ' NMTVDISPINFO
    TVN_ENDLABELEDITA = (TVN_FIRST - 11)       ' NMTVDISPINFO
    TVN_KEYDOWN = (TVN_FIRST - 12)                ' NMTVKEYDOWN

    TVN_SELCHANGINGW = (TVN_FIRST - 50)
    TVN_SELCHANGEDW = (TVN_FIRST - 51)
    TVN_GETDISPINFOW = (TVN_FIRST - 52)
    TVN_SETDISPINFOW = (TVN_FIRST - 53)
    TVN_ITEMEXPANDINGW = (TVN_FIRST - 54)
    TVN_ITEMEXPANDEDW = (TVN_FIRST - 55)
    TVN_BEGINDRAGW = (TVN_FIRST - 56)
    TVN_BEGINRDRAGW = (TVN_FIRST - 57)
    TVN_DELETEITEMW = (TVN_FIRST - 58)
    TVN_BEGINLABELEDITW = (TVN_FIRST - 59)
    TVN_ENDLABELEDITW = (TVN_FIRST - 60)

    TVN_GETINFOTIPA = (TVN_FIRST - 13)
    TVN_GETINFOTIPW = (TVN_FIRST - 14)
    TVN_SINGLEEXPAND = (TVN_FIRST - 15)
    TVN_ITEMCHANGINGA = (TVN_FIRST - 16)
    TVN_ITEMCHANGINGW = (TVN_FIRST - 17)
    TVN_ITEMCHANGEDA = (TVN_FIRST - 18)
    TVN_ITEMCHANGEDW = (TVN_FIRST - 19)
    TVN_ASYNCDRAW = (TVN_FIRST - 20)

End Enum   ' Notifications

Public Const TVNRET_DEFAULT = &H0
Public Const TVNRET_SKIPOLD = &H1
Public Const TVNRET_SKIPNEW = &H2

' lParam for most treeview notification messages
Public Type NMTREEVIEW   ' was NM_TREEVIEW
  hdr As NMHDR
  ' Specifies a notification-specific action flag.
  ' Is TVC_* for TVN_SELCHANGING, TVN_SELCHANGED, TVN_SETDISPINFO
  ' Is TVE_* for TVN_ITEMEXPANDING, TVN_ITEMEXPANDED
  Action As Long
  itemOld As TVITEM
  itemNew As TVITEM
  ptDrag As POINT
End Type
Public Type NMTVSTATEIMAGECHANGING
    hdr As NMHDR
    hti As LongPtr
    iOldStateImageIndex As Long
    iNewStateImageIndex As Long
End Type
Public Type NMTVDISPINFO
    hdr As NMHDR
    Item As TVITEM
End Type
Public Type NMTVDISPINFOEX
    hdr As NMHDR
    Item As TVITEMEX
End Type
Public Type NMTVKEYDOWN
    hdr As NMHDR
    wVKey As Integer
    Flags As Long
End Type
Public Const TVCDRF_NOIMAGES = &H10000
Public Type NMTVCUSTOMDRAW
    NMCD As NMCUSTOMDRAW
    ClrText As Long
    ClrTextBk As Long
    iLevel As Long
End Type
Public Type NMTVGETINFOTIP
    hdr As NMHDR
    pszText As LongPtr
    cchTextMax As Long
    hItem As LongPtr
    lParam As LongPtr
End Type
Public Type NMTVITEMCHANGE
    hdr As NMHDR
    uChanged As Long
    hItem As LongPtr
    uStateNew As TVITEM_State
    uStateOld As TVITEM_State
    lParam As LongPtr
End Type
Public Type NMTVASYNCDRAW
    hdr As NMHDR
    pimldp As IMAGELISTDRAWPARAMS
    hr As Long
    hItem As LongPtr
    lParam As LongPtr
    dwRetFlags As Long
    iRetImageIndex As Long
End Type

Public Function TreeView_SetImageList(hwnd As LongPtr, himl As LongPtr, iImage As TVImageLists) As LongPtr
  TreeView_SetImageList = SendMessage(hwnd, TVM_SETIMAGELIST, ByVal iImage, ByVal himl)
End Function

Public Function TreeView_GetImageList(hwnd As LongPtr) As LongPtr
TreeView_GetImageList = SendMessage(hwnd, TVM_GETIMAGELIST, 0, ByVal 0&)
End Function

Public Function TreeView_GetIndent(hwnd As LongPtr) As Long
TreeView_GetIndent = CLng(SendMessage(hwnd, TVM_GETINDENT, 0, ByVal 0&))
End Function

Public Function TreeView_SetIndent(hwnd As LongPtr, indent As Long) As Long
TreeView_SetIndent = CLng(SendMessage(hwnd, TVM_SETINDENT, indent, ByVal 0&))
End Function

Public Function TreeView_GetISearchString(hwnd As LongPtr, lpsz As LongPtr) As Long
TreeView_GetISearchString = CLng(SendMessage(hwnd, TVM_GETISEARCHSTRING, 0, ByVal lpsz))
End Function

Public Function TreeView_SetToolTips(hwnd As LongPtr, hwndTT As LongPtr) As LongPtr
TreeView_SetToolTips = SendMessage(hwnd, TVM_SETTOOLTIPS, hwndTT, ByVal 0&)
End Function

Public Function TreeView_GetToolTips(hwnd As LongPtr) As LongPtr
TreeView_GetToolTips = SendMessage(hwnd, TVM_GETTOOLTIPS, 0, ByVal 0&)
End Function

Public Function TreeView_GetItemPartRect(hwnd As LongPtr, hItem As LongPtr, prc As RECT, partid As TVITEMPART) As Long
Dim tInfo As TVGETITEMPARTRECTINFO
tInfo.hti = hItem
tInfo.prc = prc
tInfo.partid = partid
TreeView_GetItemPartRect = CLng(SendMessage(hwnd, TVM_GETITEMPARTRECT, 0, tInfo))

End Function

Public Function TreeView_GetItemRect(hwnd As LongPtr, hItem As LongPtr, prc As RECT, Code As Long) As Long
TreeView_GetItemRect = CLng(SendMessage(hwnd, TVM_GETITEMRECT, Code, prc))
End Function

Public Function TreeView_GetLineColor(hwnd As LongPtr) As Long
    TreeView_GetLineColor = CLng(SendMessage(hwnd, TVM_GETLINECOLOR, 0, ByVal 0&))
End Function

Public Function TreeView_SetLineColor(hwnd As LongPtr, clr As Long) As Long
    TreeView_SetLineColor = CLng(SendMessage(hwnd, TVM_SETLINECOLOR, 0, ByVal clr))
End Function

Public Function TreeView_SetStyle(hwnd As LongPtr, dwStyle As TV_Styles) As Long
    Dim lStyle As LongPtr
    lStyle = GetWindowLong(hwnd, GWL_STYLE)
    lStyle = lStyle Or dwStyle
    TreeView_SetStyle = CLng(SetWindowLong(hwnd, GWL_STYLE, lStyle))

End Function

Public Function TreeView_SetExtendedStyle(hwnd As LongPtr, lST As TV_Ex_Styles) As Long
    Dim lStyle As LongPtr

    lStyle = SendMessage(hwnd, TVM_GETEXTENDEDSTYLE, 0, 0)
    lStyle = lStyle Or lST
    Call SendMessage(hwnd, TVM_SETEXTENDEDSTYLE, 0, ByVal lStyle)

End Function

' TreeView_GetNextItem

' Retrieves the tree-view item that bears the specified relationship to a specified item.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetNextItem(hwnd As LongPtr, _
                                     hItem As LongPtr, _
                                     flag As TVM_GETNEXTITEM_wParam) As LongPtr
    TreeView_GetNextItem = SendMessage(hwnd, TVM_GETNEXTITEM, ByVal flag, ByVal hItem)
End Function

Public Function TreeView_GetNextSelected(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_GetNextSelected = TreeView_GetNextItem(hwnd, hItem, TVGN_NEXTSELECTED)
End Function
' Retrieves the first child item. The hitem parameter must be NULL.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetChild(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_GetChild = TreeView_GetNextItem(hwnd, hItem, TVGN_CHILD)
End Function

' Retrieves the next sibling item.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetNextSibling(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_GetNextSibling = TreeView_GetNextItem(hwnd, hItem, TVGN_NEXT)
End Function

Public Function TreeView_GetPrevSibling(hwnd As LongPtr, hItem As LongPtr) As LongPtr
  TreeView_GetPrevSibling = TreeView_GetNextItem(hwnd, hItem, TVGN_PREVIOUS)
End Function

Public Function TreeView_GetNextVisible(hwnd As LongPtr, hItem As LongPtr) As LongPtr
  TreeView_GetNextVisible = TreeView_GetNextItem(hwnd, hItem, TVGN_NEXTVISIBLE)
End Function

Public Function TreeView_GetPrevVisible(hwnd As LongPtr, hItem As LongPtr) As LongPtr
  TreeView_GetPrevVisible = TreeView_GetNextItem(hwnd, hItem, TVGN_PREVIOUSVISIBLE)
End Function

' Retrieves the parent of the specified item.
' Returns the handle to the item if successful or 0 otherwise.
Public Function TreeView_SelectDropTarget(hwnd As LongPtr, hItem As LongPtr) As Long
  TreeView_SelectDropTarget = TreeView_Select(hwnd, hItem, TVGN_DROPHILITE)
End Function

Public Function TreeView_SelectSetFirstVisible(hwnd As LongPtr, hItem As LongPtr) As Long
  TreeView_SelectSetFirstVisible = TreeView_Select(hwnd, hItem, TVGN_FIRSTVISIBLE)
End Function

Public Function TreeView_SetAutoScrollInfo(hwnd As LongPtr, uPixPerSec As Long, uUpdateTime As Long) As Long
TreeView_SetAutoScrollInfo = CLng(SendMessage(hwnd, TVM_SETAUTOSCROLLINFO, uPixPerSec, ByVal uUpdateTime))
End Function

'#define TreeView_SetBorder(hwnd, dwFlags, xBorder, yBorder) (int)SNDMSG ((hwnd), TVM_SETBORDER,(WPARAM) (dwFlags),
'MAKELPARAM (xBorder, yBorder))
Public Function TreeView_SetBorder(hwnd As LongPtr, dwFlags As TVSB_Flags, xBorder As Long, yBorder As Long) As Long
TreeView_SetBorder = CLng(SendMessage(hwnd, TVM_SETBORDER, dwFlags, ByVal MAKELPARAM(xBorder, yBorder)))
End Function

Public Function TreeView_SetHot(hwnd As LongPtr, hItem As LongPtr) As Long
TreeView_SetHot = CLng(SendMessage(hwnd, TVM_SETHOT, 0, ByVal hItem))
End Function

Public Function TreeView_SetTextColor(hwnd As LongPtr, clr As Long) As Long
TreeView_SetTextColor = CLng(SendMessage(hwnd, TVM_SETTEXTCOLOR, 0, ByVal clr))
End Function

Public Function TreeView_ShowInfoTip(hwnd As LongPtr, hItem As LongPtr) As Long
TreeView_ShowInfoTip = CLng(SendMessage(hwnd, TVM_SHOWINFOTIP, 0, ByVal hItem))
End Function

Public Function TreeView_GetParent(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_GetParent = TreeView_GetNextItem(hwnd, hItem, TVGN_PARENT)
End Function

Public Function TreeView_MapAccIDToHTREEITEM(hwnd As LongPtr, id As Long) As LongPtr
TreeView_MapAccIDToHTREEITEM = SendMessage(hwnd, TVM_MAPACCIDTOHTREEITEM, id, ByVal 0)
End Function

Public Function TreeView_MapHTREEITEMToAccID(hwnd As LongPtr, htreeitem As LongPtr) As Long
TreeView_MapHTREEITEMToAccID = CLng(SendMessage(hwnd, TVM_MAPHTREEITEMTOACCID, htreeitem, ByVal 0))
End Function

' Retrieves the currently selected item.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetSelection(hwnd As LongPtr) As LongPtr
    TreeView_GetSelection = TreeView_GetNextItem(hwnd, 0, TVGN_CARET)
End Function

Public Function TreeView_InsertItem(hwnd As LongPtr, lpis As TVINSERTSTRUCT) As LongPtr
TreeView_InsertItem = SendMessage(hwnd, TVM_INSERTITEM, 0, lpis)
End Function

Public Function TreeView_InsertItemEx(hwnd As LongPtr, lpis As TVINSERTSTRUCTEX) As LongPtr
TreeView_InsertItemEx = SendMessage(hwnd, TVM_INSERTITEM, 0, lpis)
End Function
' Retrieves the topmost or very first item of the tree-view control.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetRoot(hwnd As LongPtr) As LongPtr
    TreeView_GetRoot = TreeView_GetNextItem(hwnd, 0, TVGN_ROOT)
End Function

' Retrieves some or all of a tree-view item's attributes.
' Returns TRUE if successful or FALSE otherwise.

Public Function TreeView_GetItem(hwnd As LongPtr, pItem As TVITEM) As Boolean
    TreeView_GetItem = SendMessage(hwnd, TVM_GETITEM, 0, pItem)
End Function

Public Function TreeView_GetItemState(hwndTV As LongPtr, hti As LongPtr, Mask As TVITEM_State) As Long
    TreeView_GetItemState = CLng(SendMessage(hwndTV, TVM_GETITEMSTATE, hti, ByVal Mask))
End Function
' Sets some or all of a tree-view item's attributes.
' Old docs say returns zero if successful or - 1 otherwise.
' New docs say returns TRUE if successful, or FALSE otherwise

Public Function TreeView_SetItem(hwnd As LongPtr, pItem As TVITEM) As Boolean
    TreeView_SetItem = SendMessage(hwnd, TVM_SETITEM, 0, pItem)
End Function

Public Function TreeView_SetItemState(hwndTV As LongPtr, _
                                      hti As LongPtr, _
                                      data As TVITEM_State, _
                                      Mask As TVITEM_State) As Long
    Dim tVI As TVITEMEX
    tVI.Mask = TVIF_STATE Or TVIF_HANDLE
    tVI.hItem = hti
    tVI.StateMask = Mask
    tVI.State = data
    TreeView_SetItemState = CLng(SendMessage(hwndTV, TVM_SETITEM, 0, tVI))
End Function

Public Function TreeView_SetItemStateEx(hwndTV As LongPtr, _
                                        hti As LongPtr, _
                                        Mask As TVITEM_State_Ex) As Long
    Dim tVI As TVITEMEX
    tVI.Mask = TVIF_STATEEX
    tVI.hItem = hti
    tVI.uStateEx = Mask
    TreeView_SetItemStateEx = CLng(SendMessage(hwndTV, TVM_SETITEM, 0, tVI))
End Function

Public Function TreeView_SetCheckState(hwndTV As LongPtr, _
                                       hti As LongPtr, _
                                       fCheck As Long) As Long
    TreeView_SetCheckState = TreeView_SetItemState(hwndTV, hti, INDEXTOSTATEIMAGEMASK(IIf(fCheck, 2, 1)), TVIS_STATEIMAGEMASK)

End Function

Public Function TreeView_SetCheckStateEx(hwndTV As LongPtr, _
                                       hti As LongPtr, _
                                       fCheck As Long) As Long
    TreeView_SetCheckStateEx = TreeView_SetItemState(hwndTV, hti, INDEXTOSTATEIMAGEMASK(fCheck), TVIS_STATEIMAGEMASK)

End Function

Public Function TreeView_GetCheckState(hwndTV As LongPtr, hti As LongPtr) As Long
    TreeView_GetCheckState = STATEIMAGEMASKTOINDEX(CLng(SendMessage(hwndTV, TVM_GETITEMSTATE, hti, ByVal TVIS_STATEIMAGEMASK)))

End Function
' Determines the location of the specified point relative to the client area of a tree-view control.
' Returns the handle to the tree-view item that occupies the specified point or NULL if no item
' occupies the point.

Public Function TreeView_HitTest(hwnd As LongPtr, lpht As TVHITTESTINFO) As LongPtr
    TreeView_HitTest = SendMessage(hwnd, TVM_HITTEST, 0, lpht)
End Function
' Removes an item from a tree-view control.
' Returns TRUE if successful or FALSE otherwise.

Public Function TreeView_DeleteItem(hwnd As LongPtr, hItem As LongPtr) As Boolean
    TreeView_DeleteItem = SendMessage(hwnd, TVM_DELETEITEM, 0, ByVal hItem)
End Function

' Removes all items from a tree-view control.
' Returns TRUE if successful or FALSE otherwise.

Public Function TreeView_DeleteAllItems(hwnd As LongPtr) As Boolean
    TreeView_DeleteAllItems = SendMessage(hwnd, TVM_DELETEITEM, 0, ByVal TVI_ROOT)
End Function
' Creates a dragging bitmap for the specified item in a tree-view control, creates an image list
' for the bitmap, and adds the bitmap to the image list. An application can display the image
' when dragging the item by using the image list functions.
' Returns the handle of the image list to which the dragging bitmap was added if successful or
' NULL otherwise.

Public Function TreeView_CreateDragImage(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_CreateDragImage = SendMessage(hwnd, TVM_CREATEDRAGIMAGE, 0, ByVal hItem)
End Function

' Sorts the child items of the specified parent item in a tree-view control.
' Returns TRUE if successful or FALSE otherwise.
' fRecurse is reserved for future use and must be zero.
Public Function TreeView_EditLabel(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_EditLabel = SendMessage(hwnd, TVM_EDITLABEL, ByVal 0&, ByVal hItem)
End Function

Public Function TreeView_EndEditLabelNow(hwnd As LongPtr, fCancel As Long) As Long
    TreeView_EndEditLabelNow = CLng(SendMessage(hwnd, TVM_ENDEDITLABELNOW, fCancel, ByVal 0))
End Function

Public Function TreeView_GetFirstVisible(hwnd As LongPtr) As LongPtr
    TreeView_GetFirstVisible = TreeView_GetNextItem(hwnd, 0, TVGN_FIRSTVISIBLE)
End Function

Public Function TreeView_GetLastVisible(hwnd As LongPtr) As LongPtr   ' IE4
    TreeView_GetLastVisible = TreeView_GetNextItem(hwnd, 0, TVGN_LASTVISIBLE)
End Function

Public Function TreeView_GetBkColor(hwnd As LongPtr) As Long
    TreeView_GetBkColor = CLng(SendMessage(hwnd, TVM_GETBKCOLOR, 0, ByVal 0))
End Function

Public Function TreeView_SetInsertMark(hwnd As LongPtr, _
                                       hItem As LongPtr, _
                                       fAfter As Long) As Boolean   ' IE4
    TreeView_SetInsertMark = SendMessage(hwnd, TVM_SETINSERTMARK, ByVal fAfter, ByVal hItem)
End Function

Public Function TreeView_GetCount(hwnd As LongPtr) As Long
    TreeView_GetCount = CLng(SendMessage(hwnd, TVM_GETCOUNT, 0, ByVal 0&))
End Function

Public Function TreeView_GetDropHilight(hwnd As LongPtr) As LongPtr
    TreeView_GetDropHilight = TreeView_GetNextItem(hwnd, 0, TVGN_DROPHILITE)
End Function

Public Function TreeView_GetExtendedStyle(hwnd As LongPtr) As Long
    TreeView_GetExtendedStyle = CLng(SendMessage(hwnd, TVM_GETEXTENDEDSTYLE, 0, ByVal 0))
End Function

Public Function TreeView_SetUnicodeFormat(hwnd As LongPtr, _
                                          fUnicode As Long) As Boolean   ' IE4
    TreeView_SetUnicodeFormat = SendMessage(hwnd, TVM_SETUNICODEFORMAT, ByVal fUnicode, 0)
End Function

Public Function TreeView_GetUnicodeFormat(hwnd As LongPtr) As Boolean   ' IE4
    TreeView_GetUnicodeFormat = SendMessage(hwnd, TVM_GETUNICODEFORMAT, 0, 0)
End Function

' returns (int), old?
Public Function TreeView_SetItemHeight(hwnd As LongPtr, iHeight As Long) As Long   ' IE4
    TreeView_SetItemHeight = CLng(SendMessage(hwnd, TVM_SETITEMHEIGHT, ByVal iHeight, 0))
End Function

Public Function TreeView_GetTextColor(hwnd As LongPtr) As Long   ' IE4
    TreeView_GetTextColor = CLng(SendMessage(hwnd, TVM_GETTEXTCOLOR, 0, 0))
End Function

' returns (UINT), old?
Public Function TreeView_SetScrollTime(hwnd As LongPtr, uTime As Long) As Long   ' IE4
    TreeView_SetScrollTime = CLng(SendMessage(hwnd, TVM_SETSCROLLTIME, ByVal uTime, 0))
End Function

' returns (UINT)
Public Function TreeView_GetScrollTime(hwnd As LongPtr) As Long   ' IE4
    TreeView_GetScrollTime = CLng(SendMessage(hwnd, TVM_GETSCROLLTIME, 0, 0))
End Function

' returns (COLORREF), old?
Public Function TreeView_SetInsertMarkColor(hwnd As LongPtr, clr As Long) As Long   ' IE4
    TreeView_SetInsertMarkColor = CLng(SendMessage(hwnd, TVM_SETINSERTMARKCOLOR, 0, ByVal clr))
End Function

' returns (COLORREF)
Public Function TreeView_GetInsertMarkColor(hwnd As LongPtr) As Long   ' IE4
    TreeView_GetInsertMarkColor = CLng(SendMessage(hwnd, TVM_GETINSERTMARKCOLOR, 0, 0))
End Function
'
' ================================================================

' returns (int)
Public Function TreeView_GetItemHeight(hwnd As LongPtr) As Long   ' IE4
    TreeView_GetItemHeight = CLng(SendMessage(hwnd, TVM_GETITEMHEIGHT, 0, 0))
End Function

' returns (COLORREF), old?
Public Function TreeView_SetBkColor(hwnd As LongPtr, clr As Long) As Long   ' IE4
    TreeView_SetBkColor = CLng(SendMessage(hwnd, TVM_SETBKCOLOR, 0, ByVal clr))
End Function

' Retrieves the handle to the edit control being used to edit a tree-view item's text.
' Returns the handle to the edit control if successful or NULL otherwise.

Public Function TreeView_GetEditControl(hwnd As LongPtr) As LongPtr
    TreeView_GetEditControl = SendMessage(hwnd, TVM_GETEDITCONTROL, 0, 0)
End Function

' Returns the number of items that are fully visible in the client window of the tree-view control.

Public Function TreeView_GetVisibleCount(hwnd As LongPtr) As Long
    TreeView_GetVisibleCount = CLng(SendMessage(hwnd, TVM_GETVISIBLECOUNT, 0, 0))
End Function

Public Function TreeView_SortChildren(hwnd As LongPtr, _
                                      hItem As LongPtr, _
                                      fRecurse As Boolean) As Boolean
    TreeView_SortChildren = SendMessage(hwnd, TVM_SORTCHILDREN, ByVal fRecurse, ByVal hItem)
End Function

' Ensures that a tree-view item is visible, expanding the parent item or scrolling the tree-view
' control, if necessary.
' Returns TRUE if the system scrolled the items in the tree-view control to ensure that the
' specified item is visible. Otherwise, the macro returns FALSE.

Public Function TreeView_EnsureVisible(hwnd As LongPtr, hItem As LongPtr) As Boolean
    TreeView_EnsureVisible = SendMessage(hwnd, TVM_ENSUREVISIBLE, 0, ByVal hItem)
End Function
' Expands or collapses the list of child items, if any, associated with the specified parent item.
' Returns TRUE if successful or FALSE otherwise.
' (docs say TVM_EXPAND does not send the TVN_ITEMEXPANDING and
' TVN_ITEMEXPANDED notification messages to the parent window...?)

Public Function TreeView_Expand(hwnd As LongPtr, hItem As LongPtr, flag As TVM_EXPAND_wParam) As Boolean
    TreeView_Expand = SendMessage(hwnd, TVM_EXPAND, ByVal flag, ByVal hItem)
End Function

' Selects the specified tree-view item, scrolls the item into view, or redraws the item
' in the style used to indicate the target of a drag-and-drop operation.
' If hitem is NULL, the selection is removed from the currently selected item, if any.
' Returns TRUE if successful or FALSE otherwise.

Public Function TreeView_Select(hwnd As LongPtr, hItem As LongPtr, Code As Long) As Boolean
    TreeView_Select = SendMessage(hwnd, TVM_SELECTITEM, ByVal Code, ByVal hItem)
End Function

' Sets the selection to the specified item.
' Returns TRUE if successful or FALSE otherwise.

' If the specified item is already selected, a TVN_SELCHANGING *will not* be generated !!

' If the specified item is 0 (indicating to remove selection from any currrently selected item)
' and an item is selected, a TVN_SELCHANGING *will* be generated and the itemNew
' member of NMTREEVIEW will be 0 !!!

Public Function TreeView_SelectItem(hwnd As LongPtr, hItem As LongPtr) As Boolean
    TreeView_SelectItem = TreeView_Select(hwnd, hItem, TVGN_CARET)
End Function

' Sorts tree-view items using an application-defined callback function that compares the items.
' Returns TRUE if successful or FALSE otherwise.
' fRecurse is reserved for future use and must be zero.

Public Function TreeView_SortChildrenCB(hwnd As LongPtr, _
                                        psort As TVSORTCB, _
                                        fRecurse As Boolean) As Boolean
    TreeView_SortChildrenCB = SendMessage(hwnd, TVM_SORTCHILDRENCB, ByVal fRecurse, psort)
End Function

Public Function GetTVItemlParam(hwndTV As LongPtr, hItem As LongPtr) As LongPtr
  Dim tVI As TVITEM
  
  tVI.hItem = hItem
  tVI.Mask = TVIF_PARAM
  
  If TreeView_GetItem(hwndTV, tVI) Then
    GetTVItemlParam = tVI.lParam
  End If

End Function

End Module